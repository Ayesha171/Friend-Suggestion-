/**
   * Get the friends id for the given user id.
   * @param type $userId
   * @return type
   */
  public function getFriends($userId) {
    $sql = 'SELECT * FROM `relationship` WHERE ' .
            '(`user_one_id` = ' . $userId . ' OR `user_two_id` = '. $userId .') ' .
            'AND `status` = 1';
            
    $resultObj = $this->dbCon->query($sql);
    
    $friends = array();
    
    while($row = $resultObj->fetch_assoc()) {
      if ($row['user_one_id'] !== $userId) {
        $friends[] = $row['user_one_id'];
      }
      
      if ($row['user_two_id'] !== $userId) {
        $friends[] = $row['user_two_id'];
      }
    }
    
    return $friends;
  }

  /**
   * Get the user details object for the given user id.
   *
   * @param $userId
   * @return array|null
   */
  public function getUser($userId) {
    $user = null;
    $sql = 'SELECT * FROM `users` WHERE `user_id` = ' . $userId;
    
    $resultObj = $this->dbCon->query($sql);
    
    if ($resultObj) {
      $user = $resultObj->fetch_assoc();
    }
    
    return $user;
  }
  
  /**
   * Get a list of suggested friends for the current user.
   */
  public function getFriendSuggestions() {
    $userId = $this->loggedInUser->getUserId();
    $friends = $this->getFriends($userId);
    $suggestedFriends = [];
    
    foreach ($friends as $friendId) {
      # Friends friends list.
      $ff_list = $this->getFriends($friendId);
      
      foreach ($ff_list as $ffriendId) {
        # If the friendsFriend(ff) is not us, and not our friend, he can be suggested
        if ($ffriendId != $userId && !in_array($ffriendId, $friends)) {
          
          # The key is the suggested friend
          $suggestedFriends[$ffriendId] = ['mutual_friends' => []];
          $ff_friends = $this->getFriends($ffriendId);
          
          foreach ($ff_friends as $ff_friendId) {
            if (in_array($ff_friendId, $friends)) {
              # If he is a friend of the current user, he is a mutual friend
              $suggestedFriends[$ffriendId]['mutual_friends'][] = $ff_friendId;
            }
          }
          
        }
      }
      
    }
    # Convert the friend id's to user objects.
    $suggestedFriendObjs = array();
    if (!empty($suggestedFriends)) {
      foreach ($suggestedFriends as $suggestedFriend => $mutualFriends) {
        $suggestedFriendObj = new stdClass();
        $suggestedFriendObj->suggestedUser = $this->getUser($suggestedFriend);
        
        if (!empty($mutualFriends)) {
          $mutualFriendObjs = [];
          foreach ($mutualFriends['mutual_friends'] as $mutualFriend) {
            $mutualFriendObjs[] =  $this->getUser($mutualFriend);
          }
        }
        
        $suggestedFriendObj->mutualFriends = $mutualFriendObjs;
        $suggestedFriendObjs[] = $suggestedFriendObj;
      }
    }
    
    return $suggestedFriendObjs;
  }
... .. ...